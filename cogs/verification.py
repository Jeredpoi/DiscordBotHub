import discord
from discord.ext import commands
from discord import app_commands
import sqlite3

class VerificationView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        # –∫–Ω–æ–ø–∫–∞ —Å callback
        button = discord.ui.Button(label="–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è", style=discord.ButtonStyle.success, custom_id="verify_button")
        button.callback = self.verify_callback
        self.add_item(button)

    async def verify_callback(self, interaction: discord.Interaction):
        member = interaction.user
        guild = interaction.guild

        role_verified = discord.utils.get(guild.roles, name="–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
        role_unverified = discord.utils.get(guild.roles, name="Unverified")

        if role_verified and role_unverified:
            await member.remove_roles(role_unverified)
            await member.add_roles(role_verified)
            await interaction.response.send_message("üéâ –¢—ã —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª—Å—è!", ephemeral=True)
        else:
            await interaction.response.send_message(
                "‚ö†Ô∏è –†–æ–ª–∏ Verified/Unverified –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                ephemeral=True
            )


class Verification(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.dbpath = "database.db"
        self.role_verified = "–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
        self.role_unverified = "Unverified"

        self.create_table()

    def create_table(self):
        with sqlite3.connect(self.dbpath) as db:
            cursor = db.cursor()
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS verification (
                    guild_id INTEGER PRIMARY KEY,
                    channel_id INTEGER,
                    message_id INTEGER
                )
            """)
            db.commit()

    @app_commands.command(name="send_verification", description="üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    @app_commands.describe(channel="–ö–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    async def send_verification(self, interaction: discord.Interaction, channel: discord.TextChannel):
        embed = discord.Embed(
            title="‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è",
            description="–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º.",
            color=discord.Color.green()
        )

        view = VerificationView()
        msg = await channel.send(embed=embed, view=view)

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–∞–ª –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
        with sqlite3.connect(self.dbpath) as db:
            cursor = db.cursor()
            cursor.execute("""
                INSERT OR REPLACE INTO verification (guild_id, channel_id, message_id)
                VALUES (?, ?, ?)
            """, (interaction.guild.id, channel.id, msg.id))
            db.commit()

        # –ø–æ–¥–∫–ª—é—á–∞–µ–º persistent view
        self.bot.add_view(view, message_id=msg.id)

        await interaction.response.send_message(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {channel.mention}", ephemeral=True)

    @commands.Cog.listener()
    async def on_member_join(self, member: discord.Member):
        """–ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞ —Ä–æ–ª–∏ Unverified"""
        role = discord.utils.get(member.guild.roles, name=self.role_unverified)
        if role:
            await member.add_roles(role)
            print(f"‚úÖ {member.name} –ø–æ–ª—É—á–∏–ª —Ä–æ–ª—å Unverified")
        else:
            print("‚ùå –†–æ–ª—å 'Unverified' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

    @commands.Cog.listener()
    async def on_ready(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ persistent view –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        await self.bot.wait_until_ready()
        with sqlite3.connect(self.dbpath) as db:
            cursor = db.cursor()
            cursor.execute("SELECT guild_id, channel_id, message_id FROM verification")
            rows = cursor.fetchall()

        for guild_id, channel_id, message_id in rows:
            guild = self.bot.get_guild(guild_id)
            if not guild:
                continue
            channel = guild.get_channel(channel_id)
            if not channel:
                continue
            try:
                await channel.fetch_message(message_id)
                view = VerificationView()
                self.bot.add_view(view, message_id=message_id)
                print(f"üîÑ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {guild.name}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ {guild_id}: {e}")


async def setup(bot: commands.Bot):
    await bot.add_cog(Verification(bot))