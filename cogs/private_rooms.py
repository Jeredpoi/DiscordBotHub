import discord
from discord.ext import commands, tasks
from discord import app_commands
import asyncio
import sqlite3
from datetime import datetime
from config import Config  # –¢–≤–æ–∏ —Ü–≤–µ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect("private_rooms.db")
cursor = conn.cursor()

# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
cursor.execute("""
CREATE TABLE IF NOT EXISTS private_room_settings (
    guild_id INTEGER PRIMARY KEY,
    category_id INTEGER,
    join_channel_id INTEGER,
    settings_channel_id INTEGER,
    settings_message_id INTEGER
)
""")
conn.commit()

# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
cursor.execute("""
CREATE TABLE IF NOT EXISTS active_private_rooms (
    guild_id INTEGER,
    channel_id INTEGER,
    owner_id INTEGER,
    created_at TEXT,
    PRIMARY KEY (guild_id, channel_id)
)
""")
conn.commit()


class PrivateRooms(commands.Cog):
    """–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏"""

    def __init__(self, bot):
        self.bot = bot

    # -------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã --------------------
    @app_commands.command(
        name="setup_private_rooms",
        description="üè† –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç"
    )
    @app_commands.describe(
        category="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç",
        join_channel="–ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã)"
    )
    async def setup_private_rooms(
        self,
        interaction: discord.Interaction,
        category: discord.CategoryChannel,
        join_channel: discord.VoiceChannel
    ):
        if interaction.user.id != interaction.guild.owner_id:
            await interaction.response.send_message(
                "‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ä–≤–µ—Ä–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!", ephemeral=True
            )
            return
        guild_id = interaction.guild.id
        cursor.execute("""
        INSERT OR REPLACE INTO private_room_settings (guild_id, category_id, join_channel_id)
        VALUES (?, ?, ?)
        """, (guild_id, category.id, join_channel.id))
        conn.commit()

        embed = discord.Embed(
            title="üè† –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞",
            description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–Ω–∞—Ç—ã!",
            color=Config.COLORS['success']
        )
        embed.add_field(name="üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", value=category.mention, inline=True)
        embed.add_field(name="üö™ –ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", value=join_channel.mention, inline=True)
        embed.add_field(
            name="üîß –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:",
            value="‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç –≤ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n"
                  "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞\n"
                  "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–æ–º–Ω–∞—Ç—ã\n"
                  "‚Ä¢ –ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª—è–µ—Ç—Å—è –∫–æ–≥–¥–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—É—Å—Ç–æ–π",
            inline=False
        )
        await interaction.response.send_message(embed=embed)

    # -------------------- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ --------------------
    @app_commands.command(
        name="setsettings_privaterooms",
        description="‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏"
    )
    @app_commands.describe(settings_channel="–ö–∞–Ω–∞–ª –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    @app_commands.default_permissions(manage_channels=True)
    async def setsettings_privaterooms(self, interaction: discord.Interaction, settings_channel: discord.TextChannel):
        guild_id = interaction.guild.id
        cursor.execute("SELECT * FROM private_room_settings WHERE guild_id = ?", (guild_id,))
        row = cursor.fetchone()
        if not row:
            await interaction.response.send_message("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ `/setup_private_rooms`", ephemeral=True)
            return

        category_id, join_channel_id = row[1], row[2]

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        view = PrivateRoomButtons(self.bot)
        msg = await settings_channel.send(
            embed=discord.Embed(
                title="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏",
                description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–π –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–æ–π.",
                color=Config.COLORS['info']
            ),
            view=view
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        cursor.execute("""
        UPDATE private_room_settings
        SET settings_channel_id = ?, settings_message_id = ?
        WHERE guild_id = ?
        """, (settings_channel.id, msg.id, guild_id))
        conn.commit()

        await interaction.response.send_message(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {settings_channel.mention}", ephemeral=True)

    # -------------------- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã --------------------
    async def create_private_room(self, member, category_id):
        guild = member.guild
        category = guild.get_channel(category_id)
        if not category:
            return

        overwrites = {
            guild.default_role: discord.PermissionOverwrite(connect=False),
            member: discord.PermissionOverwrite(connect=True, speak=True, manage_channels=True, move_members=True),
            guild.me: discord.PermissionOverwrite(connect=True, manage_channels=True, move_members=True)
        }

        room_name = f"üè† {member.display_name}"
        private_room = await guild.create_voice_channel(name=room_name, category=category, overwrites=overwrites)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É
        cursor.execute("""
        INSERT INTO active_private_rooms (guild_id, channel_id, owner_id, created_at)
        VALUES (?, ?, ?, ?)
        """, (guild.id, private_room.id, member.id, datetime.utcnow().isoformat()))
        conn.commit()

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await member.move_to(private_room)

    # -------------------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –∫–æ–º–Ω–∞—Ç --------------------
    async def check_empty_room(self, channel, guild_id):
        await asyncio.sleep(2)
        if len(channel.members) == 0:
            try:
                cursor.execute("DELETE FROM active_private_rooms WHERE guild_id = ? AND channel_id = ?", (guild_id, channel.id))
                conn.commit()
                await channel.delete(reason="–ü—Ä–∏–≤–∞—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ –æ–ø—É—Å—Ç–µ–ª–∞")
            except:
                pass

    # -------------------- –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è/–ø–æ–∫–∏–¥–∞–Ω–∏—è --------------------
    @commands.Cog.listener()
    async def on_voice_state_update(self, member, before, after):
        guild_id = member.guild.id
        cursor.execute("SELECT category_id, join_channel_id FROM private_room_settings WHERE guild_id = ?", (guild_id,))
        row = cursor.fetchone()
        if not row:
            return
        category_id, join_channel_id = row

        if after.channel and after.channel.id == join_channel_id:
            await self.create_private_room(member, category_id)

        if before.channel:
            cursor.execute("SELECT * FROM active_private_rooms WHERE guild_id = ? AND channel_id = ?", (guild_id, before.channel.id))
            if cursor.fetchone():
                await self.check_empty_room(before.channel, guild_id)


# -------------------- –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ --------------------
class RenameModal(discord.ui.Modal, title="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É"):
    new_name = discord.ui.TextInput(label="–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", max_length=100)

    def __init__(self, channel):
        super().__init__()
        self.channel = channel

    async def on_submit(self, interaction: discord.Interaction):
        try:
            await self.channel.edit(name=self.new_name.value)
            await interaction.response.send_message(f"‚úÖ –ö–æ–º–Ω–∞—Ç–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ {self.new_name.value}", ephemeral=True)
        except discord.Forbidden:
            await interaction.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", ephemeral=True)


class LimitModal(discord.ui.Modal, title="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"):
    limit = discord.ui.TextInput(label="–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (0 = –±–µ–∑ –ª–∏–º–∏—Ç–∞)", max_length=3)

    def __init__(self, channel):
        super().__init__()
        self.channel = channel

    async def on_submit(self, interaction: discord.Interaction):
        try:
            limit_value = int(self.limit.value)
            await self.channel.edit(user_limit=limit_value)
            description = "–õ–∏–º–∏—Ç —Å–Ω—è—Ç!" if limit_value == 0 else f"–õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {limit_value}"
            await interaction.response.send_message(f"‚úÖ {description}", ephemeral=True)
        except:
            await interaction.response.send_message("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!", ephemeral=True)

class PrivateRoomButtons(discord.ui.View):
    """–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–æ–π"""

    def __init__(self, bot):
        super().__init__(timeout=None)
        self.bot = bot

    @discord.ui.button(label="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É", style=discord.ButtonStyle.primary)
    async def rename_room(self, interaction: discord.Interaction, button: discord.ui.Button):
        member = interaction.user
        channel = member.voice.channel if member.voice else None
        if not channel:
            await interaction.response.send_message("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å–≤–æ–µ–π –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ!", ephemeral=True)
            return
        cursor.execute("SELECT owner_id FROM active_private_rooms WHERE guild_id = ? AND channel_id = ?",
                       (interaction.guild.id, channel.id))
        row = cursor.fetchone()
        if not row or row[0] != member.id:
            await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–Ω–∞—Ç–æ–π!", ephemeral=True)
            return
        await interaction.response.send_modal(RenameModal(channel))

    @discord.ui.button(label="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", style=discord.ButtonStyle.secondary)
    async def set_limit(self, interaction: discord.Interaction, button: discord.ui.Button):
        member = interaction.user
        channel = member.voice.channel if member.voice else None
        if not channel:
            await interaction.response.send_message("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å–≤–æ–µ–π –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ!", ephemeral=True)
            return
        cursor.execute("SELECT owner_id FROM active_private_rooms WHERE guild_id = ? AND channel_id = ?",
                       (interaction.guild.id, channel.id))
        row = cursor.fetchone()
        if not row or row[0] != member.id:
            await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–Ω–∞—Ç–æ–π!", ephemeral=True)
            return
        await interaction.response.send_modal(LimitModal(channel))

    @discord.ui.button(label="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", style=discord.ButtonStyle.success)
    async def invite_user(self, interaction: discord.Interaction, button: discord.ui.Button):
        member = interaction.user
        channel = member.voice.channel if member.voice else None
        if not channel:
            await interaction.response.send_message("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å–≤–æ–µ–π –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ!", ephemeral=True)
            return
        cursor.execute("SELECT owner_id FROM active_private_rooms WHERE guild_id = ? AND channel_id = ?",
                       (interaction.guild.id, channel.id))
        row = cursor.fetchone()
        if not row or row[0] != member.id:
            await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–Ω–∞—Ç–æ–π!", ephemeral=True)
            return
        await interaction.response.send_modal(UserModal(channel, action="invite"))

    @discord.ui.button(label="–ò—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", style=discord.ButtonStyle.danger)
    async def kick_user(self, interaction: discord.Interaction, button: discord.ui.Button):
        member = interaction.user
        channel = member.voice.channel if member.voice else None
        if not channel:
            await interaction.response.send_message("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å–≤–æ–µ–π –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ!", ephemeral=True)
            return
        cursor.execute("SELECT owner_id FROM active_private_rooms WHERE guild_id = ? AND channel_id = ?",
                       (interaction.guild.id, channel.id))
        row = cursor.fetchone()
        if not row or row[0] != member.id:
            await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–Ω–∞—Ç–æ–π!", ephemeral=True)
            return
        await interaction.response.send_modal(UserModal(channel, action="kick"))

    @discord.ui.button(label="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", style=discord.ButtonStyle.danger)
    async def ban_user(self, interaction: discord.Interaction, button: discord.ui.Button):
        member = interaction.user
        channel = member.voice.channel if member.voice else None
        if not channel:
            await interaction.response.send_message("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å–≤–æ–µ–π –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ!", ephemeral=True)
            return
        cursor.execute("SELECT owner_id FROM active_private_rooms WHERE guild_id = ? AND channel_id = ?",
                       (interaction.guild.id, channel.id))
        row = cursor.fetchone()
        if not row or row[0] != member.id:
            await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–Ω–∞—Ç–æ–π!", ephemeral=True)
            return
        await interaction.response.send_modal(UserModal(channel, action="ban"))

    @discord.ui.button(label="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", style=discord.ButtonStyle.success)
    async def unban_user(self, interaction: discord.Interaction, button: discord.ui.Button):
        member = interaction.user
        channel = member.voice.channel if member.voice else None
        if not channel:
            await interaction.response.send_message("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å–≤–æ–µ–π –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ!", ephemeral=True)
            return
        cursor.execute("SELECT owner_id FROM active_private_rooms WHERE guild_id = ? AND channel_id = ?",
                       (interaction.guild.id, channel.id))
        row = cursor.fetchone()
        if not row or row[0] != member.id:
            await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–Ω–∞—Ç–æ–π!", ephemeral=True)
            return
        await interaction.response.send_modal(UserModal(channel, action="unban"))


class UserModal(discord.ui.Modal):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–µ–π—Å—Ç–≤–∏—è"""

    def __init__(self, channel, action):
        title_map = {
            "invite": "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "kick": "–ò—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "ban": "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "unban": "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        }
        super().__init__(title=title_map[action])
        self.channel = channel
        self.action = action
        self.user_input = discord.ui.TextInput(label="–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ ID)", style=discord.TextStyle.short)
        self.add_item(self.user_input)

    async def on_submit(self, interaction: discord.Interaction):
        guild = interaction.guild
        try:
            user_id = int(self.user_input.value.strip("<@!>"))
            user = guild.get_member(user_id)
            if not user:
                await interaction.response.send_message("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", ephemeral=True)
                return
        except:
            await interaction.response.send_message("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", ephemeral=True)
            return

        overwrite = discord.PermissionOverwrite()
        if self.action == "invite":
            overwrite.connect = True
            overwrite.speak = True
            overwrite.view_channel = True
            await self.channel.set_permissions(user, overwrite=overwrite)
            await interaction.response.send_message(f"‚úÖ {user.mention} –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç—É", ephemeral=True)
        elif self.action == "kick":
            if user in self.channel.members:
                await user.move_to(None)
            overwrite.connect = False
            await self.channel.set_permissions(user, overwrite=overwrite)
            await interaction.response.send_message(f"üë¢ {user.mention} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∫–æ–º–Ω–∞—Ç—ã", ephemeral=True)
        elif self.action == "ban":
            if user in self.channel.members:
                await user.move_to(None)
            overwrite.connect = False
            overwrite.view_channel = False
            await self.channel.set_permissions(user, overwrite=overwrite)
            await interaction.response.send_message(f"üî® {user.mention} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ", ephemeral=True)
        elif self.action == "unban":
            await self.channel.set_permissions(user, overwrite=None)
            await interaction.response.send_message(f"üîì {user.mention} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", ephemeral=True)

async def setup(bot: commands.Bot):
    await bot.add_cog(PrivateRooms(bot))