import discord
from discord.ext import commands
from discord import app_commands
import sqlite3
from datetime import datetime
from config import Config

DB_PATH = "logs.db"

# ------------------ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã ------------------
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS log_channels (
            guild_id INTEGER,
            channel_id INTEGER,
            log_type TEXT,
            PRIMARY KEY(guild_id, log_type)
        )
    """)
    conn.commit()
    conn.close()

init_db()

class ServerLogs(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.voice_times = {}  # –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –≥–æ–ª–æ—Å–µ

    # ------------------ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ------------------
    async def get_log_channel(self, guild_id, log_type):
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT channel_id FROM log_channels WHERE guild_id=? AND log_type=?", (guild_id, log_type))
        result = cursor.fetchone()
        conn.close()
        if result:
            return self.bot.get_channel(result[0])
        return None

    async def send_log(self, guild_id: int, log_type: str, embed: discord.Embed):
        channel = await self.get_log_channel(guild_id, log_type)
        if channel:
            try:
                await channel.send(embed=embed)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ {log_type}: {e}")

    # ------------------ –ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–æ–≥–æ–≤ ------------------
    @app_commands.command(name="set_log_channel", description="üìã –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤")
    @app_commands.describe(log_type="–¢–∏–ø –ª–æ–≥–æ–≤", channel="–ö–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤")
    @app_commands.choices(log_type=[
        app_commands.Choice(name="–°–æ–æ–±—â–µ–Ω–∏—è", value="messages"),
        app_commands.Choice(name="–ì–æ–ª–æ—Å–æ–≤—ã–µ", value="voice"),
        app_commands.Choice(name="–ú–æ–¥–µ—Ä–∞—Ü–∏—è", value="moderation"),
        app_commands.Choice(name="–†–æ–ª–∏", value="roles")
    ])
    @app_commands.default_permissions(manage_guild=True)
    async def set_log_channel(self, interaction: discord.Interaction, log_type: app_commands.Choice[str], channel: discord.TextChannel):
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("REPLACE INTO log_channels (guild_id, log_type, channel_id) VALUES (?, ?, ?)",
                       (interaction.guild.id, log_type.value, channel.id))
        conn.commit()
        conn.close()
        embed = discord.Embed(
            title="‚úÖ –õ–æ–≥–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
            description=f"–¢–µ–ø–µ—Ä—å –ª–æ–≥–∏ —Ç–∏–ø–∞ **{log_type.name}** –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ {channel.mention}",
            color=Config.COLORS['success']
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)

    # ------------------ –õ–æ–≥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ------------------
    @commands.Cog.listener()
    async def on_message_delete(self, message):
        if message.author.bot: return
        embed = discord.Embed(title="üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ", color=Config.COLORS['error'], timestamp=datetime.utcnow())
        embed.add_field(name="üë§ –ê–≤—Ç–æ—Ä", value=f"{message.author} (`{message.author.id}`)")
        embed.add_field(name="üì∫ –ö–∞–Ω–∞–ª", value=f"{message.channel} (`{message.channel.id}`)")
        content = message.content[:1000] if message.content else "*–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞*"
        embed.add_field(name="üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ", value=f"```{content}```" if content != "*–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞*" else content)
        embed.add_field(name="üìé –í–ª–æ–∂–µ–Ω–∏—è", value=str(len(message.attachments)))
        embed.add_field(name="üîó –£–ø–æ–º–∏–Ω–∞–Ω–∏—è", value=", ".join([u.mention for u in message.mentions]) or "–ù–µ—Ç")
        await self.send_log(message.guild.id, "messages", embed)

    @commands.Cog.listener()
    async def on_message_edit(self, before, after):
        if before.author.bot or before.content == after.content: return
        embed = discord.Embed(title="‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ", color=Config.COLORS['warning'], timestamp=datetime.utcnow())
        embed.add_field(name="üë§ –ê–≤—Ç–æ—Ä", value=f"{before.author} (`{before.author.id}`)")
        embed.add_field(name="üì∫ –ö–∞–Ω–∞–ª", value=f"{before.channel} (`{before.channel.id}`)")
        embed.add_field(name="üìù –°—Ç–∞—Ä–æ–µ", value=f"```{before.content[:500]}```" if before.content else "*–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞*")
        embed.add_field(name="üìù –ù–æ–≤–æ–µ", value=f"```{after.content[:500]}```" if after.content else "*–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞*")
        embed.add_field(name="üìé –í–ª–æ–∂–µ–Ω–∏—è", value=str(len(after.attachments)))
        embed.add_field(name="üîó –£–ø–æ–º–∏–Ω–∞–Ω–∏—è", value=", ".join([u.mention for u in after.mentions]) or "–ù–µ—Ç")
        await self.send_log(before.guild.id, "messages", embed)

    # ------------------ –õ–æ–≥–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö ------------------
    @commands.Cog.listener()
    async def on_voice_state_update(self, member, before, after):
        if before.channel != after.channel:
            now = datetime.utcnow()
            embed = discord.Embed(title="üîä –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ", color=Config.COLORS['info'], timestamp=now)
            embed.add_field(name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=f"{member}")
            if before.channel is None and after.channel is not None:
                embed.title = "üîä –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É"
                embed.add_field(name="üì∫ –ö–∞–Ω–∞–ª", value=f"{after.channel} (`{after.channel.id}`)")
                self.voice_times[member.id] = now
            elif before.channel is not None and after.channel is None:
                embed.title = "üîá –ü–æ–∫–∏–Ω—É–ª –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª"
                embed.add_field(name="üì∫ –ö–∞–Ω–∞–ª", value=f"{before.channel} (`{before.channel.id}`)")
                start_time = self.voice_times.pop(member.id, None)
                if start_time:
                    duration = now - start_time
                    embed.add_field(name="‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –≥–æ–ª–æ—Å–µ", value=str(duration).split(".")[0])
            elif before.channel != after.channel:
                embed.title = "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏"
                embed.add_field(name="üì∫ –ò–∑ –∫–∞–Ω–∞–ª–∞", value=f"{before.channel} (`{before.channel.id}`)")
                embed.add_field(name="üì∫ –í –∫–∞–Ω–∞–ª", value=f"{after.channel} (`{after.channel.id}`)")
            await self.send_log(member.guild.id, "voice", embed)

    # ------------------ –õ–æ–≥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ ------------------
    @commands.Cog.listener()
    async def on_member_ban(self, guild, user):
        embed = discord.Embed(title="üî® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", color=Config.COLORS['error'], timestamp=datetime.utcnow())
        embed.add_field(name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=f"{user} (`{user.id}`)")
        try:
            ban_info = await guild.fetch_ban(user)
            if ban_info.reason:
                embed.add_field(name="üìã –ü—Ä–∏—á–∏–Ω–∞", value=ban_info.reason)
        except:
            embed.add_field(name="üìã –ü—Ä–∏—á–∏–Ω–∞", value="–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        member = guild.get_member(user.id)
        if member:
            embed.add_field(name="üé≠ –†–æ–ª–∏ –¥–æ –±–∞–Ω–∞", value=", ".join([r.name for r in member.roles if r != guild.default_role]) or "–ù–µ—Ç")
        await self.send_log(guild.id, "moderation", embed)

    @commands.Cog.listener()
    async def on_member_unban(self, guild, user):
        embed = discord.Embed(title="üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", color=Config.COLORS['success'], timestamp=datetime.utcnow())
        embed.add_field(name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=f"{user} (`{user.id}`)")
        await self.send_log(guild.id, "moderation", embed)

    # ------------------ –õ–æ–≥–∏ —Ä–æ–ª–µ–π ------------------
    @commands.Cog.listener()
    async def on_guild_role_create(self, role):
        embed = discord.Embed(title="üé≠ –†–æ–ª—å —Å–æ–∑–¥–∞–Ω–∞", color=role.color if role.color != discord.Color.default() else Config.COLORS['success'], timestamp=datetime.utcnow())
        embed.add_field(name="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", value=role.name)
        embed.add_field(name="üî¢ ID", value=str(role.id))
        embed.add_field(name="üé® –¶–≤–µ—Ç", value=str(role.color))
        perms = [p[0] for p in role.permissions if p[1]]
        embed.add_field(name="‚öô –†–∞–∑—Ä–µ—à–µ–Ω–∏—è", value=", ".join(perms) if perms else "–ù–µ—Ç")
        await self.send_log(role.guild.id, "roles", embed)

    @commands.Cog.listener()
    async def on_guild_role_delete(self, role):
        embed = discord.Embed(title="üóëÔ∏è –†–æ–ª—å —É–¥–∞–ª–µ–Ω–∞", color=Config.COLORS['error'], timestamp=datetime.utcnow())
        embed.add_field(name="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", value=role.name)
        embed.add_field(name="üî¢ ID", value=str(role.id))
        embed.add_field(name="üé® –¶–≤–µ—Ç", value=str(role.color))
        await self.send_log(role.guild.id, "roles", embed)

    @commands.Cog.listener()
    async def on_member_update(self, before, after):
        if before.roles != after.roles:
            added = set(after.roles) - set(before.roles)
            removed = set(before.roles) - set(after.roles)
            if added or removed:
                embed = discord.Embed(title="üé≠ –†–æ–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã", color=Config.COLORS['info'], timestamp=datetime.utcnow())
                embed.add_field(name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=f"{after}")
                if added:
                    embed.add_field(name="‚ûï –î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–æ–ª–∏", value=", ".join([r.name for r in added]))
                if removed:
                    embed.add_field(name="‚ûñ –£–¥–∞–ª–µ–Ω—ã —Ä–æ–ª–∏", value=", ".join([r.name for r in removed]))
                await self.send_log(after.guild.id, "roles", embed)

# ================== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ==================
logs_cog: ServerLogs = None  # —Ç—É—Ç –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –æ–±—ä–µ–∫—Ç COG

# ================== –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤ ==================
async def log_event(guild_id: int, log_type: str, embed: discord.Embed):
    if logs_cog:
        await logs_cog.send_log(guild_id, log_type, embed)

# ================== setup ==================
async def setup(bot):
    global logs_cog
    logs_cog = ServerLogs(bot)
    await bot.add_cog(logs_cog)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –∫–∞–∂–¥—ã–π —Ç–∏–ø –ª–æ–≥–æ–≤
    log_types = [("messages", "–¢–µ–∫—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏"),
                 ("voice", "–ì–æ–ª–æ—Å–æ–≤—ã–µ –ª–æ–≥–∏"),
                 ("moderation", "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –ª–æ–≥–∏"),
                 ("roles", "–õ–æ–≥–∏ —Ä–æ–ª–µ–π")]

    for log_type, name in log_types:
        try:
            print(f"üîë {name} –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {name}: {e}")